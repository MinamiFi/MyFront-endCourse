{
    "data": [
        {
            "name":"第一章：面向对象程序设计之类上篇",
            "content":"学习内容：面向对象程序设计方法将程序中的数据元素和算法元素根据其内在关联关系进行分类管理，这就形成了“类”的概念。分类可以更好地管理程序代码。类相当于是一种自定义的数据类型，用类所定义的变量被改称为“对象”。本章通过具体案例演示了结构化程序设计是如何演变到面向对象程序设计的，然后再系统地介绍面向对象程序设计方法。本章内容包括类的定义、对象的定义与访问、对象的构造与析构、类中的常成员与静态成员以及类的友元等。"
        },
        {
            "name":"第二章：面向对象程序设计之类下篇",
            "content":"学习内容：重用类代码有三种形式，分别是用类定义对象、类的组合和类的继承。本章讲解类的组合与继承。程序员可以基于已有的零件类来定义新的整体类，这就是类的组合。程序员也可以继承已有的基类来定义新的派生类，这就是类的继承与派生。利用派生类和基类之间的特殊关系可以进一步提高程序代码的可重用性，这就是面向对象程序设计中的对象替换与多态技术。本章还会具体讲解与多态相关的运算符重载、虚函数和抽象类等概念。最后本章将简单讨论一下类的多继承。"
        },
        {
            "name":"第三章：流类库与文件I/O",
            "content":"学习内容：C语言通过输入/输出函数（例如scanf、printf）实现了数据的输入和输出，C++语言则是通过输入/输出流类为程序员提供输入/输出功能。这些输入/输出流类都是从类ios派生出来的，它们组成了一个以ios为基类的类族，这个类族被称为C++语言的流类库。本章将介绍流类库中三组不同功能的输入/输出流类，分别是通用输入/输出流类、文件输入/输出流类和字符串输入/输出流类。"
        },
        {
            "name":"第四章：C++标准库",
            "content":"学习内容：C++语言全盘继承了C语言的标准C库，另外又增加了一些新的库。新库中包含一些新增的系统函数，但更多的是为面向对象程序设计方法提供的系统类库，这些新库被统称为C++标准库。为了更好地凝练源代码，C++语言引入了模板技术，其中包括函数模板和类模板。模板是一种代码重用技术，C++标准库在编写时就采用了模板技术，因此标准库能以较少的代码量却提供了很强大的功能。本章重点介绍模板技术、C++语言的异常处理机制以及C++标准库所提供的数据集合存储及处理功能。本章最后还以微软公司开发的MFC类库为例，简单介绍如何开发一个Windows图形用户界面程序。"
        }
    ]
}